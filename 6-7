def __init__(self):
    self.w = None
    self.b = None
    self.losses = []
    
def forpass(self, x):
    z = np.sum(x * self.w) + self.b
    return z

def backprop(self, x, err):
    w_grad = x * err
    b_grad = 1 * err
    return w_grad, b_grad
def fit(self, x, y, epochs=100):
    self.w = np.ones(x.shape[1])
    slef.b = 0
    for i in range(epochs):
        loss = 0
        indexes = np.random.permutation(np.arange(len(x)))

        for i in index:     # 모든 샘플에 대해 반복
            z = self.forpass(x[i])     # 정방향 계산
            a = self.activation(z)     #활성화 함수 적용
            err = -(y[i] - a)     #오차 계산
            w_grad, b_grad = self.backprop(x[i], err)     # 역방향 계산
            self.w -= w_grad     # 가중치 업데이트
            self.b -= b_grad     # 절편 업데이트
            #안전한 로그 계산을 위해 클리핑한 후 손실을 누적
            a = np.clip(a, 1e-10, 1-1e-10)
            loss += -(y[i]*np.log(a)+(1-y[i]*np.log(1-a)) # 에포크마다 평균 손실 저장
        self.loss.append(losses/len(y))
def predict(self, x):
    z = [self.forpass(x_i) for x_i in x]     # 정방향 계산
    return np.array(z) > 0     # 계단 함수 적용

def score(self, x, y):
    return np.mean(self.predict(x) == y)
                      
layer = SingleLayer( )
layer.fit(x_train, y_train)
layer.score(x_test, y_test)
                      
plt.plot(layer.losses)
plt.xlabel('epoch')
plt.ylabel("loss")
plt.show( )
                    
